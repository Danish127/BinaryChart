/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package binarychart;

//import com.sun.xml.internal.ws.util.StringUtils;
/**
 *
 * @author dbm3
 */
public class Chart extends javax.swing.JFrame {

    int bArray[];

    /**
     * Creates new form Chart
     */
    public Chart() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bIn = new javax.swing.JTextField();
        convert = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        out = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bIn.setText("Insert Binary String (spaces and dashes okay)");

        convert.setText("Convert");
        convert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertActionPerformed(evt);
            }
        });

        jTextPane1.setEditable(false);
        jTextPane1.setText("Type of conversion\n\nUnsigned:\n\nSigned:\n\nOne's Compliment:\n\nTwo's Compliment: \n\nBias: \n");
        jScrollPane1.setViewportView(jTextPane1);

        out.setEditable(false);
        out.setText("Values\n\n");
        jScrollPane2.setViewportView(out);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bIn)
            .addComponent(convert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(convert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void convertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertActionPerformed
        // TODO add your handling code here:
        out.setText("Values\n\n");//resets output window every call
        String binary = bIn.getText();//takes in from the entry window
        //int bytes;
        binary = binary.replaceAll("[^01]", "");//scrubs string of all non-1 and non-0 inputs.  Will need to be changed for hex support, maybe
        //System.out.println(binary);
        bIn.setText(binary);//resets the entry field with the binary
        //int counter = 0;
        int n = binary.length();//for the algebra
        /*for( int i = 0; i < binary.length(); i++ ) {
         if( binary.charAt(i) == ' ' ) {
         counter++;
         } 
         }*/
        //bytes = (counter + 1) * 4;
        //binary = binary.replace(" ", "");
        //System.out.println(binary);
        
        //ADD CODE HERE FOR IF THE STRING IS EMPTY
        
        bArray = new int[n];//int array of 1's and 0's.  Easier for algebra

        for (int i = 0; i < binary.length(); i++) {//parse the string into the array
            if (binary.charAt(i) == '1') {
                bArray[i] = 1;
            } else {
                bArray[i] = 0;
            }
        }
        //for(int i = 0; i < bArray.length; i++)
        //System.out.print(bArray[i]);

        //unsigned
        int unsigned = 0;//algebra for n(n) * 2^(n-1) + ... + n(0) * 2^0
        for (int i = 0; i < bArray.length; i++) {
            //System.out.println(unsigned);
            unsigned += Math.pow((double) 2, (double) (n - 1 - i)) * bArray[i];
        }
        out.setText(out.getText() + unsigned + "\n\n");

        //signed
        int signed = 0;//same as signed, but stunted with negative modifier
        if (bArray[0] == 0) {
            for (int i = 0; i < bArray.length; i++) {
                //System.out.println(unsigned);
                signed += Math.pow((double) 2, (double) (n - 1 - i)) * bArray[i];
            }
        } else {
            for (int i = 1; i < bArray.length; i++) {
                //System.out.println(unsigned);
                signed += Math.pow((double) 2, (double) (n - 1 - i)) * bArray[i];
            }
            signed *= -1;
        }
        out.setText(out.getText() + signed + "\n\n");//Add modifier to display a - for -0

        //One's Compliment
        int onesCompliment = 0;
        if (bArray[0] == 0) {
            for (int i = 0; i < bArray.length; i++) {
                //System.out.println(unsigned);
                onesCompliment += Math.pow((double) 2, (double) (n - 1 - i)) * bArray[i];
            }
        } else {
            int bArrayFlipped[] = new int[n];//new array for when the bits flip
            bArrayFlipped = bArray.clone();//clone for modification
            for (int i = 1; i < bArray.length; i++) {
                //System.out.println(unsigned);
                bArrayFlipped[i] = Math.abs(bArray[i] - 1);
                onesCompliment += Math.pow((double) 2, (double) (n - 1 - i)) * bArrayFlipped[i];
            }
            onesCompliment *= -1;
        }
        out.setText(out.getText() + onesCompliment + "\n\n");//Add modifier to display a - for -0

        //Two's Compliment
        int twosCompliment = 0;//algebra for -n(n) * 2^(n-1) + n(n-1) * 2^(n-2) + ... + n(0) * 2^0
        for (int i = 0; i < bArray.length; i++) {
            //System.out.println(unsigned);
            if (i == 0) {
                twosCompliment -= Math.pow((double) 2, (double) (n - 1 - i)) * bArray[i];
            } else {
                twosCompliment += Math.pow((double) 2, (double) (n - 1 - i)) * bArray[i];
                //System.out.println("At iteration " + i + ", twosCompliment is " + twosCompliment + " but should have added " + bArray[i]);
            }
        }

        out.setText(out.getText() + twosCompliment + "\n\n");

        //Bias
        int bias = 0;
        for (int i = 0; i < bArray.length; i++) {
            //System.out.println(unsigned);
            bias += Math.pow((double) 2, (double) (n - 1 - i)) * bArray[i];
        }

        bias -= Math.pow((double) 2, (double) (n - 1)) - 1;

        out.setText(out.getText() + bias + "\n\n");
        
        //float
        //float flowty = 0.0f;
        //Can't add yet.  Need to figure out if java will maintain accuracy or if I will need to emulate it with strings
    }//GEN-LAST:event_convertActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bIn;
    private javax.swing.JButton convert;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane out;
    // End of variables declaration//GEN-END:variables
}
